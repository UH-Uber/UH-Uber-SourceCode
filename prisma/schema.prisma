generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum RideStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  role          Role      @default(USER)
  name          String?   // username
  avatarUrl     String?   // profile picture URL
  bio           String?   // user bio
  phone         String?   // phone number
  pronouns      String?   // user pronouns
  campusLocation String?  // campus location preference
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Ride relationships
  offeredRides  Ride[]    @relation("DriverRides")
  bookedRides   RideBooking[] // Rides the user has booked as a passenger
}

model Ride {
  id            Int       @id @default(autoincrement())
  driverId      Int
  driver        User      @relation("DriverRides", fields: [driverId], references: [id])
  startLocation String
  endLocation   String
  departureTime DateTime
  availableSeats Int
  status        RideStatus @default(PENDING)
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relationship with bookings
  bookings      RideBooking[]

  @@index([driverId])
}

model RideBooking {
  id          Int        @id @default(autoincrement())
  rideId      Int
  ride        Ride       @relation(fields: [rideId], references: [id])
  passengerId Int
  passenger   User       @relation(fields: [passengerId], references: [id])
  status      RideStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([rideId, passengerId])
  @@index([rideId])
  @@index([passengerId])
}

// Keeping the Stuff model as is for compatibility
model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition
  owner     String
}

enum Condition {
  excellent
  good
  fair
  poor
}