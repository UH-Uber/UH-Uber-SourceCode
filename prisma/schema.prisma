// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // for local development
  url      = env("DATABASE_URL")
  // for Vercel
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  role          Role          @default(USER)
  name          String?       // username
  avatarUrl     String?       // profile picture URL
  bio           String?       // user bio
  driverRides   RideRequest[] @relation("DriverRides")
  riderRides    RideRequest[] @relation("RiderRides")
}

enum Condition {
  excellent
  good
  fair
  poor
}

model Stuff {
  id        Int       @id @default(autoincrement())
  name      String
  quantity  Int
  condition Condition
  owner     String
}

enum RideStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

model RideRequest {
  id          Int         @id @default(autoincrement())
  pickup      String
  dropoff     String
  date        String
  time        String
  seats       Int
  notes       String?
  status      RideStatus  @default(PENDING)
  price       Float       @default(5.00)
  recurring   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  
  // Relations
  driverId    Int
  driver      User        @relation("DriverRides", fields: [driverId], references: [id])
  riders      User[]      @relation("RiderRides")
}
